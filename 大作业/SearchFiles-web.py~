#!/usr/bin/env python

INDEX_DIR = "IndexFiles.index"

import sys, os, lucene, jieba

import web
from web import form
import urllib2
import os

urls = (
    '/', 'index',
    '/t', 's'
)


render = web.template.render('templates',cache=False) # your templates

class index:
    def GET(self):
        return render.index()

class s:
    def GET(self):
        user_data = web.input()
        vm_env.attachCurrentThread()# to avoid crash
        command = user_data.keyword
        if command =='':
            return render.formtest()
        if 'search_text' in dict(user_data).keys():
            a=func_text(command)
            return render.result_text2(a)
        elif 'search_img' in dict(user_data).keys():
            a=func_img(command)
            return render.result_img1(a)
            
    def POST(self):
        x = web.input(myfile={})
       # web.debug(x['myfile'].filename) 
       # web.debug(x['myfile'].value) 
        print x['myfile'].value
        with open('/mnt/hgfs/share/test.jpg','wb') as f:
            f.write(x['myfile'].value)
            print "OK!!!!!!!!!!!!"

def func_text(command):
    STORE_DIR = "index-2-web"
    vm_env.attachCurrentThread()
    directory = SimpleFSDirectory(File(STORE_DIR))
    searcher = IndexSearcher(DirectoryReader.open(directory))
    analyzer = SimpleAnalyzer(Version.LUCENE_CURRENT)
    return [command,run_text(searcher, analyzer, command)]


def func_img(command):
    STORE_DIR = "index-3"
    vm_env.attachCurrentThread()
    directory = SimpleFSDirectory(File(STORE_DIR))
    searcher = IndexSearcher(DirectoryReader.open(directory))
    analyzer = SimpleAnalyzer(Version.LUCENE_CURRENT)
    return [command,run_img(searcher, analyzer, command)]


from java.io import File
from org.apache.lucene.analysis.core import SimpleAnalyzer
from org.apache.lucene.index import DirectoryReader
from org.apache.lucene.queryparser.classic import QueryParser
from org.apache.lucene.store import SimpleFSDirectory
from org.apache.lucene.search import IndexSearcher
from org.apache.lucene.util import Version
from org.apache.lucene.search import BooleanQuery
from org.apache.lucene.search import BooleanClause

try:
    vm_env=lucene.initVM(vmargs=['-Djava.awt.headless=true'])
except:
    vm_env = lucene.getVMEnv()

"""
This script is loosely based on the Lucene (java implementation) demo class 
org.apache.lucene.demo.SearchFiles.  It will prompt for a search query, then it
will search the Lucene index in the current directory called 'index' for the
search query entered against the 'contents' field.  It will then display the
'path' and 'name' fields for each of the hits it finds in the index.  Note that
search.close() is currently commented out because it causes a stack overflow in
some cases.
"""
def parseCommand(command):
    '''
    input: C title:T author:A language:L
    output: {'contents':C, 'title':T, 'author':A, 'language':L}

    Sample:
    input:'contenance title:henri language:french author:william shakespeare'
    output:{'author': ' william shakespeare',
                   'language': ' french',
                   'contents': ' contenance',
                   'title': ' henri'}
    '''
    allowed_opt = ['site']
    command_dict = {}
    opt = 'contents'
    for i in command.split(' '):
        if ':' in i:
            opt, value = i.split(':')[:2]
            opt = opt.lower()
            if opt in allowed_opt and value != '':
                command_dict[opt] = command_dict.get(opt, '') + ' ' + value
        else:
            command_dict[opt] = command_dict.get(opt, '') + (" ".join(jieba.cut(i)))
    return command_dict

def run_text(searcher, analyzer, command):
    # command = unicode(command, 'utf-8')
    if command == '':
        return
    command_dict = parseCommand(command)
    querys = BooleanQuery()
    for k,v in command_dict.iteritems():
        query = QueryParser(Version.LUCENE_CURRENT, k, analyzer).parse(v)
        querys.add(query, BooleanClause.Occur.MUST)
    scoreDocs = searcher.search(querys, 200).scoreDocs
    # print "%s total matching documents." % len(scoreDocs)
    content=[]
    for scoreDoc in scoreDocs:
        doc = searcher.doc(scoreDoc.doc)
        item={}
##            explanation = searcher.explain(query, scoreDoc.doc)
        item['title']=doc.get('title') # print 'title:', doc.get('title')
        item['url']=doc.get('url') # print 'url:', doc.get('url')
        cont=doc.get('show_contents')
        tar=list(jieba.cut(command))
        for i in tar:
            if cont.find(i)!=-1:
                item['front_contents']='...'+cont[cont.find(i)-5:cont.find(i)]
                item['keyword']=cont[cont.find(i):cont.find(i)+len(i)]
                item['after_contents']=cont[cont.find(i)+len(i):cont.find(i)+len(i)+25]+'...'
                break
            # print 'site:', doc.get('site')
            # print 'name:', doc.get("name")
            # print 'path:', doc.get("path")
##            print explanation
        if 'keyword' not in item.keys():
            continue
        content.append(item)
    return content


def run_img(searcher, analyzer,command):
    query = QueryParser(Version.LUCENE_CURRENT, "search_title",analyzer).parse(command)
    scoreDocs = searcher.search(query, 200).scoreDocs
    content=[]
    for i, scoreDoc in enumerate(scoreDocs):
        doc = searcher.doc(scoreDoc.doc)
        item={}
        item['title']=doc.get('title')
        item['url']=doc.get('url')
        item['picurl']=doc.get('picurl')
        content.append(item)
    return content



if __name__ == '__main__':
    print 'lucene', lucene.VERSION
    #base_dir = os.path.dirname(os.path.abspath(sys.argv[0]))
    # run(searcher, analyzer)
    app = web.application(urls, globals())
    app.run()
    del searcher
